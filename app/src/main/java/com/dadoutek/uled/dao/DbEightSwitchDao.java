package com.dadoutek.uled.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dadoutek.uled.model.dbModel.DbEightSwitch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_EIGHT_SWITCH".
*/
public class DbEightSwitchDao extends AbstractDao<DbEightSwitch, Long> {

    public static final String TABLENAME = "DB_EIGHT_SWITCH";

    /**
     * Properties of entity DbEightSwitch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirmwareVersion = new Property(1, String.class, "firmwareVersion", false, "FIRMWARE_VERSION");
        public final static Property MeshAddr = new Property(2, int.class, "meshAddr", false, "MESH_ADDR");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property MacAddr = new Property(4, String.class, "macAddr", false, "MAC_ADDR");
        public final static Property ProductUUID = new Property(5, int.class, "productUUID", false, "PRODUCT_UUID");
        public final static Property Index = new Property(6, int.class, "index", false, "INDEX");
        public final static Property Keys = new Property(7, String.class, "keys", false, "KEYS");
        public final static Property GroupIds = new Property(8, String.class, "groupIds", false, "GROUP_IDS");
        public final static Property SceneIds = new Property(9, String.class, "sceneIds", false, "SCENE_IDS");
        public final static Property Type = new Property(10, boolean.class, "type", false, "TYPE");
    }


    public DbEightSwitchDao(DaoConfig config) {
        super(config);
    }
    
    public DbEightSwitchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_EIGHT_SWITCH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIRMWARE_VERSION\" TEXT," + // 1: firmwareVersion
                "\"MESH_ADDR\" INTEGER NOT NULL ," + // 2: meshAddr
                "\"NAME\" TEXT," + // 3: name
                "\"MAC_ADDR\" TEXT," + // 4: macAddr
                "\"PRODUCT_UUID\" INTEGER NOT NULL ," + // 5: productUUID
                "\"INDEX\" INTEGER NOT NULL ," + // 6: index
                "\"KEYS\" TEXT," + // 7: keys
                "\"GROUP_IDS\" TEXT," + // 8: groupIds
                "\"SCENE_IDS\" TEXT," + // 9: sceneIds
                "\"TYPE\" INTEGER NOT NULL );"); // 10: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_EIGHT_SWITCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbEightSwitch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firmwareVersion = entity.getFirmwareVersion();
        if (firmwareVersion != null) {
            stmt.bindString(2, firmwareVersion);
        }
        stmt.bindLong(3, entity.getMeshAddr());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(5, macAddr);
        }
        stmt.bindLong(6, entity.getProductUUID());
        stmt.bindLong(7, entity.getIndex());
 
        String keys = entity.getKeys();
        if (keys != null) {
            stmt.bindString(8, keys);
        }
 
        String groupIds = entity.getGroupIds();
        if (groupIds != null) {
            stmt.bindString(9, groupIds);
        }
 
        String sceneIds = entity.getSceneIds();
        if (sceneIds != null) {
            stmt.bindString(10, sceneIds);
        }
        stmt.bindLong(11, entity.getType() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbEightSwitch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firmwareVersion = entity.getFirmwareVersion();
        if (firmwareVersion != null) {
            stmt.bindString(2, firmwareVersion);
        }
        stmt.bindLong(3, entity.getMeshAddr());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(5, macAddr);
        }
        stmt.bindLong(6, entity.getProductUUID());
        stmt.bindLong(7, entity.getIndex());
 
        String keys = entity.getKeys();
        if (keys != null) {
            stmt.bindString(8, keys);
        }
 
        String groupIds = entity.getGroupIds();
        if (groupIds != null) {
            stmt.bindString(9, groupIds);
        }
 
        String sceneIds = entity.getSceneIds();
        if (sceneIds != null) {
            stmt.bindString(10, sceneIds);
        }
        stmt.bindLong(11, entity.getType() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbEightSwitch readEntity(Cursor cursor, int offset) {
        DbEightSwitch entity = new DbEightSwitch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firmwareVersion
            cursor.getInt(offset + 2), // meshAddr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // macAddr
            cursor.getInt(offset + 5), // productUUID
            cursor.getInt(offset + 6), // index
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // keys
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // groupIds
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sceneIds
            cursor.getShort(offset + 10) != 0 // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbEightSwitch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirmwareVersion(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMeshAddr(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMacAddr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductUUID(cursor.getInt(offset + 5));
        entity.setIndex(cursor.getInt(offset + 6));
        entity.setKeys(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGroupIds(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSceneIds(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setType(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbEightSwitch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbEightSwitch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbEightSwitch entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
