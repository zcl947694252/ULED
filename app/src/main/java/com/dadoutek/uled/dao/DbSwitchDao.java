package com.dadoutek.uled.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.dadoutek.uled.model.DbModel.DbSwitch;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DB_SWITCH".
*/
public class DbSwitchDao extends AbstractDao<DbSwitch, Long> {

    public static final String TABLENAME = "DB_SWITCH";

    /**
     * Properties of entity DbSwitch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MeshAddr = new Property(1, int.class, "meshAddr", false, "MESH_ADDR");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property ControlGroupAddr = new Property(3, int.class, "controlGroupAddr", false, "CONTROL_GROUP_ADDR");
        public final static Property MacAddr = new Property(4, String.class, "macAddr", false, "MAC_ADDR");
        public final static Property ProductUUID = new Property(5, int.class, "productUUID", false, "PRODUCT_UUID");
        public final static Property ControlSceneId = new Property(6, String.class, "controlSceneId", false, "CONTROL_SCENE_ID");
        public final static Property Index = new Property(7, int.class, "index", false, "INDEX");
        public final static Property BelongGroupId = new Property(8, Long.class, "belongGroupId", false, "BELONG_GROUP_ID");
        public final static Property Rssi = new Property(9, int.class, "rssi", false, "RSSI");
    }


    public DbSwitchDao(DaoConfig config) {
        super(config);
    }
    
    public DbSwitchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DB_SWITCH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MESH_ADDR\" INTEGER NOT NULL ," + // 1: meshAddr
                "\"NAME\" TEXT," + // 2: name
                "\"CONTROL_GROUP_ADDR\" INTEGER NOT NULL ," + // 3: controlGroupAddr
                "\"MAC_ADDR\" TEXT," + // 4: macAddr
                "\"PRODUCT_UUID\" INTEGER NOT NULL ," + // 5: productUUID
                "\"CONTROL_SCENE_ID\" TEXT," + // 6: controlSceneId
                "\"INDEX\" INTEGER NOT NULL ," + // 7: index
                "\"BELONG_GROUP_ID\" INTEGER," + // 8: belongGroupId
                "\"RSSI\" INTEGER NOT NULL );"); // 9: rssi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DB_SWITCH\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DbSwitch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMeshAddr());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getControlGroupAddr());
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(5, macAddr);
        }
        stmt.bindLong(6, entity.getProductUUID());
 
        String controlSceneId = entity.getControlSceneId();
        if (controlSceneId != null) {
            stmt.bindString(7, controlSceneId);
        }
        stmt.bindLong(8, entity.getIndex());
 
        Long belongGroupId = entity.getBelongGroupId();
        if (belongGroupId != null) {
            stmt.bindLong(9, belongGroupId);
        }
        stmt.bindLong(10, entity.getRssi());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DbSwitch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMeshAddr());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getControlGroupAddr());
 
        String macAddr = entity.getMacAddr();
        if (macAddr != null) {
            stmt.bindString(5, macAddr);
        }
        stmt.bindLong(6, entity.getProductUUID());
 
        String controlSceneId = entity.getControlSceneId();
        if (controlSceneId != null) {
            stmt.bindString(7, controlSceneId);
        }
        stmt.bindLong(8, entity.getIndex());
 
        Long belongGroupId = entity.getBelongGroupId();
        if (belongGroupId != null) {
            stmt.bindLong(9, belongGroupId);
        }
        stmt.bindLong(10, entity.getRssi());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DbSwitch readEntity(Cursor cursor, int offset) {
        DbSwitch entity = new DbSwitch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // meshAddr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // controlGroupAddr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // macAddr
            cursor.getInt(offset + 5), // productUUID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // controlSceneId
            cursor.getInt(offset + 7), // index
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // belongGroupId
            cursor.getInt(offset + 9) // rssi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DbSwitch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMeshAddr(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setControlGroupAddr(cursor.getInt(offset + 3));
        entity.setMacAddr(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProductUUID(cursor.getInt(offset + 5));
        entity.setControlSceneId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIndex(cursor.getInt(offset + 7));
        entity.setBelongGroupId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setRssi(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DbSwitch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DbSwitch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DbSwitch entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
